#include <bits/stdc++.h>
using namespace std;
#define N 1000 
long long arrangeBraces(int n, int* pos, int k) 
{ 
  
    // hash array to mark the 
    // positions of opening brackets 
    bool h[N]; 
  
    // dp 2d array 
    int dp[N][N]; 
  
    memset(h, 0, sizeof h); 
    memset(dp, 0, sizeof dp); 
  
    // mark positions in hash array 
    for (int i = 0; i < k; i++) 
        h[pos[i]] = 1; 
  
    // first position marked as 1 
    dp[0][0] = 1; 
  
    // iterate and formulate the recurrences 
    for (int i = 1; i <= 2 * n; i++) { 
        for (int j = 0; j <= 2 * n; j++) { 
  
            // if position has a opening bracket 
            if (h[i]) { 
                if (j != 0) 
                    dp[i][j] = dp[i - 1][j - 1]; 
                else
                    dp[i][j] = 0; 
            } 
            else { 
                if (j != 0) 
                    dp[i][j] = dp[i - 1][j - 1] + 
                               dp[i - 1][j + 1]; 
                else
                    dp[i][j] = dp[i - 1][j + 1]; 
            } 
        } 
    } 
  
    // return answer 
    return dp[2 * n][0]; 
} 
int main()
{
    int d;
    cin>>d;
    while(d--)
    {
        int n,k;
        cin>>n>>k;
        int* booArr = new int[k];
        
        for(int i=0;i<k;i++)
        {
            cin>>booArr[i];
        }
        int ans = arrangeBraces(n,booArr,k);
        cout<<ans<<endl;
    }
    return 0;
}
